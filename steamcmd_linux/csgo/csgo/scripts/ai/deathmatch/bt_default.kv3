<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	config = "scripts/ai/deathmatch/bt_config.kv3"
	root =
	{
		type = "decorator_bot_service"
		memory_to_expire =
		[
			"ShortTermAttackMemory"
		]
		memory_expiration_time = 0.7
		memory_expiration_distance = 0
		child =
		{
			type = "decorator_bot_service"
			memory_to_expire =
			[
				"LongTermMemory"
			]
			memory_expiration_time = 10
			memory_expiration_distance = 500
			child =
			{
				type = "decorator_bot_service"
				memory_to_expire =
				[
					"ShortTermInvestigateMemory"
				]
				memory_expiration_time = 3
				memory_expiration_distance = 200
				child =
				{
					type = "decorator_buy_service"
					output = "ShouldBuy"
					child =
					{
						type = "parallel"
						children =
						[
							{
								type = "decorator_repeat"
								child =
								{
									type = "parallel"
									children =
									[
										{
											type = "decorator_sensor"
											shape =
											{
												type = "sensor_shape_fov"
											}
											entity_type_filter = "PLAYERS"
											team_filter = "ENEMY"
											output = "Vision"
											priority = 0
											child = 
											{
												type = "decorator_picker_nearby"
												input = "Vision"
												cutoff_distance = 1500
												child = 
												{
													type = "decorator_picker_visible"
													input = "Vision"
													child = 
													{
														type = "decorator_set_reaction_time"
														input = "Vision"
														child =
														{
															type = "decorator_memory"
															input = "Vision"
															output = "ShortTermAttackMemory"
															child =
															{
																type = "decorator_memory"
																input = "Vision"
																output = "LongTermMemory"
															}
														}
													}
												}
											}
										},
										// memorize noises happening right now
										{
											type = "decorator_sensor"
											shape =
											{
												type = "sensor_shape_sphere"
												radius = 3000
											}
											entity_type_filter = "NOISE"
											output = "Hearing"
											priority = 1
											child =
											{
												type = "decorator_picker_weight_as_distance"
												input = "Hearing"
												child =
												{
													type = "decorator_picker_random_by_distance"
													distance_min = 400
													distance_max = 3000
													input = "Hearing"
													child =
													{
														type = "decorator_picker_dedup"
														input = "Hearing"
														against = "LongTermMemory"
														distance_threshold = 100
														child =
														{
															type = "decorator_set_reaction_time"
															input = "Hearing"
															child =
															{
																type = "decorator_memory"
																input = "Hearing"
																output = "LongTermMemory"
															}
														}
													}
												}
											}
										},
										// record the closest memorized event to investigate
										{
											type = "decorator_succeed"
											child =
											{
												type = "condition_is_empty"
												input = "ShortTermInvestigateMemory"
												child =
												{
													type = "decorator_memory"
													input = "LongTermMemory"
													output = "ShortTermInvestigateMemory"
													child =
													{
														type = "decorator_ranker_dist"
														input = "ShortTermInvestigateMemory"
														child =
														{
															type = "decorator_picker_max_score"
															input = "ShortTermInvestigateMemory"
														}
													}
												}
											}
										}
									]
								}
							},
							{
								type = "decorator_repeat"
								child =
								{
									type = "selector"
									children =
									[
										// Buy if we have to
										{
											type = "condition_is_empty"
											input = "ShouldBuy"
											negated = 1
											child =
											{
												// sequencer: evaluate first to last child, in order
												type = "sequencer"
												children =
												[
													{
														type = "action_wait"
														wait_time_min = 3
														wait_time_max = 3
													},
													{
														type = "action_buy"
													},
													{
														type = "decorator_remove_key"
														input = "ShouldBuy"
													}
												]
											}
										},
										// Else: face the damage source if we're taking damage
										{
											type = "decorator_sensor"
											entity_type_filter = "DAMAGE"
											output = "Damage"
											priority = 0
											child =
											{
												type = "condition_is_empty"
												input = "Damage"
												negated = 1
												child =
												{
													type = "action_aim"
													input = "Damage"
													acquire_only = 1
												}
											}
										},
										// Else: attack if we see an enemy
										{
											type = "decorator_picker_reaction_time"
											input = "ShortTermAttackMemory"
											output = "Enemy"
											child =
											{
												type = "decorator_ranker_dist"
												input = "Enemy"
												child =
												{
													type = "decorator_picker_max_score"
													input = "Enemy"
													child =
													{
														type = "condition_is_empty"
														input = "Enemy"
														negated = 1
														child =
														{
															type = "selector"
															children =
															[
																{
																	type = "parallel"
																	children =
																	[
																		{
																			type = "action_equip_weapon"
																			weapon = "BEST"
																		},
																		{
																			type = "action_combat_positioning"
																			input = "Enemy"
																			is_attacking = "Attacking"
																		},
																		{
																			type = "decorator_repeat"
																			child =
																			{
																				type = "action_aim"
																				input = "Enemy"
																				ready = "AimReady"
																			}
																		},
																		{
																			type = "decorator_repeat"
																			child =
																			{
																				type = "action_attack"
																				input = "Enemy"
																				output = "Attacking"
																				ready = "AimReady"
																			}
																		}
																	]
																}
															]
														}
													}
												}
											}
										},
										// heal if needed branch
										{
											type = "decorator_need_healing"
											health_threshold = 60
											child =
											{
												type = "sequencer"
												children =
												[
													{
														type = "action_equip_item"
														item = "weapon_healthshot"
													},
													{
														type = "action_wait"
														wait_time_min = 1.0
														wait_time_max = 1.0
													},
													{
														type = "action_pull_trigger"
														ratio = 1
													}
												]
											}
										},
										// Else: investigate the closest memorized event
										{
											type = "condition_is_empty"
											input = "ShortTermInvestigateMemory"
											negated = 1
											child =
											{
												// sequencer: evaluate first to last child, in order
												type = "sequencer"
												children =
												[
													{
														type = "action_equip_weapon"
														weapon = "BEST"
													},
													{
														type = "action_move_to"
														destination = "ShortTermInvestigateMemory"
														movement_type = "BT_ACTION_MOVETO_RUN"
														route_type = "BT_ACTION_MOVETO_FASTEST_ROUTE"
													}
												]
											}
										},
										// Else: hunt
										{
											// sequencer: evaluate first to last child, in order
											type = "sequencer"
											children =
											[
												{
													type = "action_equip_weapon"
													weapon = "BEST"
												},
												{
													type = "decorator_random_int"
													min = 0
													max = 1
													output = "BombSiteIndex"
													child =
													{
														type = "action_choose_bomb_site_area"
														input = "BombSiteIndex"
														output = "HuntAreas"
													}
												},
												{
													type = "action_choose_team_spawn_area"
													output = "HuntAreas"
												},
												{
													type = "action_choose_random_waypoint"
													input = "HuntAreas"
													output = "TargetHuntArea"
												},
												{
													type = "action_move_to"
													destination = "TargetHuntArea"
													movement_type = "BT_ACTION_MOVETO_RUN"
													route_type = "BT_ACTION_MOVETO_FASTEST_ROUTE"
												}
											]
										}
									]
								}
							}
						]
					}
				}
			}
		}
	}
}
